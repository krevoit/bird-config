protocol device {
    scan time 10;
}

include "./local6.conf";

protocol kernel {
    scan time 20;
    persist;
    import none;
    export filter {
        if source = RTS_STATIC then reject;
        krt_prefsrc = OWNIP;
        accept;
    };
}

function static_import_filter() {
    bgp_large_community.add((208976,208976,1)); # announce to upstream + peer, change to your ASN
    accept;
}

protocol static {
    route 2a0e:b107:313::/48 reject; #Put IPv6 prefixes you want to announce here
    route 2a0e:b107:314::/48 reject;
    import where static_import_filter();
    export none;
}

protocol direct {
    interface "lo";
}

include "./filter6.conf";

filter ixp_in {
    minimum_filter();
#        honor_graceful_shutdown();
        accept;
}

function upstream_import_filter(int local_pref) {
    minimum_filter();
    if !is_self_net() then {
        if ( bgp_path ~ [6939] ) then bgp_local_pref = local_pref - 25;     # Hurricane Electric
        else if ( bgp_path ~ TRANSIT_ASNS ) then bgp_local_pref = local_pref - 10;  # Tier1
        else bgp_local_pref = local_pref;
        accept;
    }
    reject;
}

function peer_import_filter(int local_pref) {
    minimum_filter();
    if !is_self_net() then {
        if ( bgp_path ~ [6939] ) then bgp_local_pref = 50;      # Hurriacne Electric
        else bgp_local_pref = local_pref;
        accept;
    }
    reject;
}

function downstream_import_filter(int local_pref) {
    bgp_large_community.add((208976,208976,1)); # announce to upstream + peer
    minimum_filter();
    if ( bgp_path ~ [6939] ) then bgp_local_pref = 50;      # Hurriacne Electric
    else bgp_local_pref = local_pref;
    accept;
}


function ris_import_filter() {
    reject;
}

function ris_export_filter() {
    minimum_filter();
    accept;
}

function upstream_export_filter(int prepends) {
    if (!is_self_net()) then reject;
    minimum_filter();
    prepend_ownas(prepends);
    accept;
}

function peer_export_filter(int prepends) {
    if(!is_self_net()) then reject;
    minimum_filter();
    prepend_ownas(prepends);
    accept;
}

function downstream_export_filter(int prepends) {
    minimum_filter();
    prepend_ownas(prepends);
    accept;
}

function kleyrex_export_filter() {
    minimum_filter();
    if is_self_net() then {
        bgp_community.add((6939, 0));
        accept;
    }
    reject;
}

template bgp upstreams {
    local as OWNAS;
    path metric 1;
    import keep filtered;
    import where upstream_import_filter(100);
    export where upstream_export_filter(0);
    import limit 80000 action block;
}

template bgp peers {
    local as OWNAS;
    path metric 1;
    import keep filtered;
    import where peer_import_filter(150);
    export where peer_export_filter(0);
    import limit 10 action block;
}

template bgp downstreams {
    local as OWNAS;
    path metric 1;
    import keep filtered;
    import where downstream_import_filter(200);
    export where downstream_export_filter(0);
    import limit 10 action block;
}

template bgp ris {
    local OWNIP as OWNAS;
    path metric 1;
    import keep filtered;
    import where ris_import_filter();
    export where ris_export_filter();
    import limit 10 action block;
    multihop 255;
}

include "./peers6/*";
